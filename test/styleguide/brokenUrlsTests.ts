import getPort from 'get-port';
import http from 'http';
import path from 'path';
import shell from 'shelljs';
import express, { static as serveStatic } from 'express';

suite('styleguide', (): void => {
  let port: number;
  let styleguideUrl: string;

  // For broken links tests we explicitly want to use a raw static server, and
  // not a full featured server like nginx. First of all because nginx removes
  // the port when doing meta redirects. Additionally the raw static server does
  // not support the 404 pages created by Next.js, so it is easier to detect
  // broken internal links.
  suiteSetup(async (): Promise<void> => {
    port = await getPort();
    styleguideUrl = `http://localhost:${port}`;

    const app = express();

    app.use('/', serveStatic(path.join(__dirname, '..', '..', 'styleguide', 'out')));

    const server = http.createServer(app);

    server.listen(port);
  });

  test('contains no broken urls.', async function (): Promise<void> {
    this.timeout(60_000);

    const projectRoot = path.join(__dirname, '..', '..');
    const cliPath = path.join(__dirname, '..', '..', 'lib', 'bin', 'verifyLinks.ts');

    // We ignore specific URLs from the 'en-us/components/navigation/pagenavigation/'
    // page. These links are generated by the component from a navigation tree
    // and do not exists.
    const ignoreUrls = `${styleguideUrl}\\/(first-section|second-section)/`;

    await new Promise((resolve, reject): void => {
      shell.exec(
        `npx ts-node ${cliPath} ${styleguideUrl} --verbose --ignore '${ignoreUrls}'`,
        { cwd: projectRoot },
        (code, stdout, stderr): void => {
          if (code !== 0) {
            return reject(stderr);
          }

          resolve();
        }
      );
    });
  });
});
